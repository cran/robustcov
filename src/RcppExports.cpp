// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// nearPPSD
arma::mat nearPPSD(arma::mat X, const float eigenTol, const float convTol, const float psdTol, const int maxit);
RcppExport SEXP _robustcov_nearPPSD(SEXP XSEXP, SEXP eigenTolSEXP, SEXP convTolSEXP, SEXP psdTolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const float >::type eigenTol(eigenTolSEXP);
    Rcpp::traits::input_parameter< const float >::type convTol(convTolSEXP);
    Rcpp::traits::input_parameter< const float >::type psdTol(psdTolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(nearPPSD(X, eigenTol, convTol, psdTol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// covGK
arma::mat covGK(const arma::mat& data);
RcppExport SEXP _robustcov_covGK(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(covGK(data));
    return rcpp_result_gen;
END_RCPP
}
// corSpearman
arma::mat corSpearman(const arma::mat& data);
RcppExport SEXP _robustcov_corSpearman(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(corSpearman(data));
    return rcpp_result_gen;
END_RCPP
}
// corKendall
arma::mat corKendall(const arma::mat& data);
RcppExport SEXP _robustcov_corKendall(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(corKendall(data));
    return rcpp_result_gen;
END_RCPP
}
// corQuadrant
arma::mat corQuadrant(const arma::mat& data);
RcppExport SEXP _robustcov_corQuadrant(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(corQuadrant(data));
    return rcpp_result_gen;
END_RCPP
}
// covSpearmanU
arma::mat covSpearmanU(const arma::mat& data);
RcppExport SEXP _robustcov_covSpearmanU(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(covSpearmanU(data));
    return rcpp_result_gen;
END_RCPP
}
// covOGK
arma::mat covOGK(const arma::mat& data);
RcppExport SEXP _robustcov_covOGK(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(covOGK(data));
    return rcpp_result_gen;
END_RCPP
}
// covNPD
arma::mat covNPD(const arma::mat& data, const float eigenTol, const float convTol, const float psdTol, const int maxit);
RcppExport SEXP _robustcov_covNPD(SEXP dataSEXP, SEXP eigenTolSEXP, SEXP convTolSEXP, SEXP psdTolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const float >::type eigenTol(eigenTolSEXP);
    Rcpp::traits::input_parameter< const float >::type convTol(convTolSEXP);
    Rcpp::traits::input_parameter< const float >::type psdTol(psdTolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(covNPD(data, eigenTol, convTol, psdTol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// raltert
arma::mat raltert(int n, const arma::mat& Omega, int nu);
RcppExport SEXP _robustcov_raltert(SEXP nSEXP, SEXP OmegaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< int >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(raltert(n, Omega, nu));
    return rcpp_result_gen;
END_RCPP
}
// rmvt
arma::mat rmvt(int n, const arma::mat& Omega, int nu);
RcppExport SEXP _robustcov_rmvt(SEXP nSEXP, SEXP OmegaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< int >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvt(n, Omega, nu));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm
arma::mat rmvnorm(int n, const arma::mat& Omega);
RcppExport SEXP _robustcov_rmvnorm(SEXP nSEXP, SEXP OmegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm(n, Omega));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_robustcov_nearPPSD", (DL_FUNC) &_robustcov_nearPPSD, 5},
    {"_robustcov_covGK", (DL_FUNC) &_robustcov_covGK, 1},
    {"_robustcov_corSpearman", (DL_FUNC) &_robustcov_corSpearman, 1},
    {"_robustcov_corKendall", (DL_FUNC) &_robustcov_corKendall, 1},
    {"_robustcov_corQuadrant", (DL_FUNC) &_robustcov_corQuadrant, 1},
    {"_robustcov_covSpearmanU", (DL_FUNC) &_robustcov_covSpearmanU, 1},
    {"_robustcov_covOGK", (DL_FUNC) &_robustcov_covOGK, 1},
    {"_robustcov_covNPD", (DL_FUNC) &_robustcov_covNPD, 5},
    {"_robustcov_raltert", (DL_FUNC) &_robustcov_raltert, 3},
    {"_robustcov_rmvt", (DL_FUNC) &_robustcov_rmvt, 3},
    {"_robustcov_rmvnorm", (DL_FUNC) &_robustcov_rmvnorm, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_robustcov(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
